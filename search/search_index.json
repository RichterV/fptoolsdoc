{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"Forest Py ToolsFP Tools features","text":"<p>Warning</p> <p>This library is under development, none of the presented solutions are available for download.</p> <p></p> <p>Process forest management end-to-end, easy as can be.</p> <p>With this library, you'll be able to plan forest inventories and volumetrics as well as process all data stemming from your forest plantation. FP Tools brings together various forestry processing methodologies into a single library, providing ease in model selection and forest performance analysis.</p> <p>This library was created as part of a master\u2019s project by student Vinicius Richter, aiming to facilitate the processing of forest inventory information and bridge the gap between IT professionals and forest engineers.</p> <p></p>"},{"location":"index.html#forest-inventory-planing-plots-alocation-on-qgis","title":"Forest inventory planing (plots alocation on QGIS)","text":"<p>In this module, you will be able to plan forest inventories by allocating plots with our plugin for QGIS.</p>"},{"location":"index.html#forest-inventory-planing","title":"Forest inventory planing","text":"<p>In this module, you will be able to plan forest inventories by allocating plots.</p>"},{"location":"index.html#hypsometric-relationship","title":"Hypsometric Relationship","text":"<p>In this module, you'll be able to perform the hypsometric relationship of a forest inventory using various equations as well as make use of artificial neural networks.</p>"},{"location":"index.html#volumetrics","title":"Volumetrics","text":"<p>In this module, you will be able to process tree volume data and fit volumetric and taper functions.</p>"},{"location":"index.html#assortments","title":"Assortments","text":"<p>In this module, you will be able to generate reports on the total volume and assortments produced by the forest.</p>"},{"location":"about_the_author.html","title":"About the Author","text":"Richter V. Bachelor\u2019s degree in Forestry Engineering and is currently pursuing a Master\u2019s degree in Forestry Engineering with a specialization in forest growth and production at the Federal University of Santa Maria. Works in the fields of artificial intelligence, computer vision, Python programming, forest inventory, remote sensing and forest management.  <p>    View portfolio </p>"},{"location":"assortments.html","title":"Assortments","text":"<p>Warning</p> <p>This library is under development, none of the presented solutions are available for download.</p> <p>Obtain the products generated by the forest inventory based on a product table. Use fitted taper functions to estimate commercial and non-commercial volume generated by the forest. Estimate volumes using fitted volumetric equations.</p>"},{"location":"assortments.html#class-parameters","title":"Class Parameters","text":"<pre><code>Assortments(df, assortments_priority=None)\n</code></pre> Parameters Description df The dataframe containing the assortments data. assortments_priority (Optional) The name of the column who defines the assortments priority. If <code>None</code>, uses the default order from the dataframe."},{"location":"assortments.html#example-of-assortments-table","title":"Example of assortments table","text":"Product Length min (m) Length max (m) D min (cm) Loss (cm) Priority Prod. 1 10 10 12 0.5 1 Prod. 2 2 2 8 0.5 2 Prod. 3 1 1.5 2 0.5 3 <p>*The column order must be followed.</p>"},{"location":"assortments.html#class-functions","title":"Class Functions","text":"<p>functions and parameters<pre><code>  Assortments.get_assortments(model, model_path, trees_df, tree_dbh, tree_height,\n                              stump=0.1, initial_height=None) #(1)\n  Assortments.get_taper_volumes(model, model_path, trees_df, tree_dbh,\n                                tree_height, bark_factor=None, stump=0.1) #(2)\n  Assortments.get_volumes(model, model_path, trees_df, tree_dbh,\n                          tree_height, bark_factor=None) #(3)\n</code></pre></p> <ol> <li> <p>model = The name of the taper function or 'ann' to be used to calculate the assortments. model_path = Path to the <code>.json</code> file containing the coefficients of the fitted models or the <code>.pkl</code> file containing the fitted artificial neural network. trees_df = Pandas DataFrame containing the inventory for which the assortments should be calculated. tree_dbh = The name of the column containing the diameter at breast height (DBH) values in centimeters. tree_height = The name of the column containing the total height values of the trees in meters. stump = (Optional) Stump height value (meters) to be considered in the assortment calculation. If <code>stump==None</code>, it defaults to <code>0.1</code>. initial_height = (Optional) Height (meters) at which the products begin to be generated. Useful for cases where the base of the tree was damaged by fire or used for resin extraction.</p> </li> <li> <p>model = The name of the taper function or taper 'ann' to be used to calculate the volume. model_path = Path to the <code>.json</code> file containing the coefficients of the fitted models or the <code>.pkl</code> file containing the fitted artificial neural network. trees_df = Pandas DataFrame containing the inventory for which the volumes should be calculated. tree_dbh = The name of the column containing the diameter at breast height (DBH) values in centimeters. tree_height = The name of the column containing the total height values of the trees in meters. bark_factor = (Optional) Value of the bark factor to be used to calculate volumes without bark. stump = (Optional) Stump height value (meters) to be considered in the volumes calculation. If <code>stump==None</code>, it defaults to <code>0.1</code>.  </p> </li> <li> <p>model = The name of the volumetric function or volumetric 'ann' to be used to calculate the volume. model_path = Path to the <code>.json</code> file containing the coefficients of the fitted models or the <code>.pkl</code> file containing the fitted artificial neural network. trees_df = Pandas DataFrame containing the inventory for which the volumes should be calculated. tree_dbh = The name of the column containing the diameter at breast height (DBH) values in centimeters. tree_height = The name of the column containing the total height values of the trees in meters. bark_factor = (Optional) Value of the bark factor to be used to calculate volumes without bark.  </p> </li> </ol> Parameters Description .get_assortments() Returns the <code>trees_df</code> dataframe with additional columns indicating the number of products generated for each assortment, as well as the volume generated for each assortment in each tree. Calculates also the comercial volume, the total volume of the tree and also the wasted volume. .get_taper_volumes() Returns the <code>trees_df</code> with the volumes calculated based on the integration of taper functions. It calculates the total volume with bark and without bark. .get_volumes() Returns the <code>trees_df</code> with the volumes calculated based on the fitted volumetric functions. It calculates the total volume with bark and without bark."},{"location":"assortments.html#example-usage","title":"Example Usage","text":"<p>taper_functions_example.py<pre><code>from fptools.assortments import Assortments #(1)\nimport pandas as pd #(2)\n</code></pre></p> <ol> <li>Import <code>Assortments</code> class.</li> <li>Import <code>pandas</code> for data manipulation.</li> </ol> <p>Create a variable for the Volumetrics Class</p> <p>taper_functions_example.py<pre><code>assortments_df = pd.read_csv(r'C:\\Your\\path\\csv_tree_cubage_file.csv') #(1)\ninventory_df = pd.read_csv(r'C:\\Your\\path\\csv_tree_cubage_file.csv') #(2)\n\nProd = Assortments(assortments_df) #(3)\n\n\nassortments = Prod.get_assortments('kozak', r\"D:\\Your\\path\\for\\taper_functions_coefficients.json\",\n                                   inventory_df, \"DAP\", \"HT\") #(4)\ntaper_volumes = Prod.get_taper_volumes('bi', r\"D:\\Your\\path\\for\\taper_functions_coefficients.json\",\n                                       inventario, \"DAP\", \"HT\", .9) #(5)             \nvolumes = Prod.get_volumes('meyer', r\"D:\\Your\\path\\for\\taper_functions_coefficients.json\",\n                           inventario, \"DAP\", \"HT\", .85) #(6)\n</code></pre></p> <ol> <li>Load your assortments df from a csv file.</li> <li>Load your inventory df from a csv file.</li> <li>Create the variable <code>Prod</code> containing the <code>Assortments</code> class and using the <code>assortments_df</code> dataframe as products.</li> <li>Calculate assortments for each tree in the <code>inventory_df</code> using the <code>kozak</code> model, the <code>DAP</code> column for DBH values and the <code>HT</code> column for the tree height values.</li> <li>Calculate volumes with integration of <code>bi</code> function for each tree in the <code>inventory_df</code> using the <code>bi</code> model, the <code>DAP</code> column for DBH values and the <code>HT</code> column for the tree height values. Also uses a bark factor of <code>90%</code>.</li> <li>Calculate volumes with volumetric function for each tree in the <code>inventory_df</code> using the <code>meyer</code> model, the <code>DAP</code> column for DBH values and the <code>HT</code> column for the tree height values. Also uses a bark factor of <code>85%</code>.</li> </ol>"},{"location":"bug_report.html","title":"Bug Report","text":"<p>If you encountered any issues or would like to suggest an improvement, please feel free to access the bug report form. Your feedback helps us improve the tool.</p>"},{"location":"cubage_planning.html","title":"Cubage Planning","text":"<p>Warning</p> <p>This library is under development, none of the presented solutions are available for download.</p> <p>Use forest inventory data to plan the trees to be sampled for volume measurement, ensuring sufficient sampling of the plantation.</p>"},{"location":"cubage_planning.html#class-parameters","title":"Class Parameters","text":"<pre><code>CubagePlanning(df, tree_dbh, tree_height)\n</code></pre> Parameters Description df The DataFrame containing the tree data. tree_dbh The name of the column containing the diameter at breast height (DBH) values of the trees (centimeters). tree_height The name of the column that contains the total heights of the trees (meters)."},{"location":"cubage_planning.html#class-functions","title":"Class Functions","text":"functions and parameters<pre><code>  CubagePlanning.resume(n_classes=10, dbh_classes=None, height_classes=None,\n                        only_height_classes=False, only_dbh_classes=False)  #(1)\n  CubagePlanning.p_resume(n_classes=10, dbh_classes=None, height_classes=None,\n                          only_height_classes=False, only_dbh_classes=False)  #(2)\n  CubagePlanning.get_values(n_cubage_trees, n_classes=10, dbh_classes=None, height_classes=None,\n                            only_height_classes=False, only_dbh_classes=False) #(3)\n</code></pre> <ol> <li> <p>n_classes = Number of classes to which the values of height and diameter at breast height will be subjected.                                        dbh_classes = (Optional) Number of DBH classes to which the values of diameter at breast height will be subjected.  If <code>None</code>, uses <code>n_classes</code> value.   height_classes = (Optional) Number of height classes to which the values of height will be subjected.  If <code>None</code>, uses <code>n_classes</code> value.   only_height_classes = (Optional) If <code>True</code>, only height classes will be used for the summary. only_dbh_classes = (Optional) only DBH classes will be used for the summary.</p> </li> <li> <p>n_classes = Number of classes to which the values of height and diameter at breast height will be subjected.                                        dbh_classes = (Optional) Number of DBH classes to which the values of diameter at breast height will be subjected. If <code>None</code>, uses <code>n_classes</code> value.    height_classes = (Optional) Number of height classes to which the values of height will be subjected. If <code>None</code>, uses <code>n_classes</code> value.    only_height_classes = (Optional) If <code>True</code>, only height classes will be used for the summary. only_dbh_classes = (Optional) only DBH classes will be used for the summary.</p> </li> <li> <p>n_cubage_trees = Number of trees that will be selected for cubage. The default is 10.  n_classes = Number of classes to which the values of height and diameter at breast height will be subjected.                                        dbh_classes = (Optional) Number of DBH classes to which the values of diameter at breast height will be subjected. If <code>None</code>, uses <code>n_classes</code> value.   height_classes = (Optional) Number of height classes to which the values of height will be subjected.  If <code>None</code>, uses <code>n_classes</code> value.   only_height_classes = (Optional) If <code>True</code>, only height classes will be used for the summary. only_dbh_classes = (Optional) only DBH classes will be used for the summary.</p> </li> </ol> Parameters Description .resume() Returns a summary of how many trees from the provided dataframe are in each class. .p_resume() Returns a summary of the percentage of trees from the provided dataframe in each class. .get_values() Returns a dataframe indicating how many trees should be sampled for volume measurement in each class, based on the percentage representation of each class in the total inventory."},{"location":"cubage_planning.html#example-usage","title":"Example Usage","text":"<p>taper_functions_example.py<pre><code>from fptools.cubage_planning import CubagePlanning #(1)\nimport pandas as pd #(2)\n</code></pre></p> <ol> <li>Import <code>CubagePlanning</code> class.</li> <li>Import <code>pandas</code> for data manipulation.</li> </ol> <p>Create a variable for the Volumetrics Class</p> <p>taper_functions_example.py<pre><code>df = pd.read_csv(r'C:\\Your\\path\\csv_inventory_file.csv') #(1)\ncub = CubagePlanning(df ,'DAP','HT') #(2)\nresume = cub.resume() #(3)\npercentual_resume = cub.p_resume() #(4)\nresults = cub.get_values(n_cubage_trees=100) #(5)\n</code></pre></p> <ol> <li>Load your csv file.</li> <li>Create the variable <code>cub</code> containing the <code>CubagePlanning</code> class, using column <code>DAP</code> for the DBH values and the column <code>HT</code> for the heights values.</li> <li>Get a summary of how many trees from the provided dataframe are in each class and save on <code>resume</code> variable.</li> <li>Get a summary of the percentage of trees from the provided dataframe in each class and save on <code>percentual_resume</code> variable.</li> <li>Get a dataframe indicating how many trees should be sampled for volume measurement in each class, based on the percentage representation of each class in the total inventory and save on <code>results</code> variable.</li> </ol>"},{"location":"getting_started.html","title":"Getting Started","text":"<p>Warning</p> <p>This library is under development, none of the presented solutions are available for download.</p> <p>To begin processing your forest data, as easily as possible, first install FP Tools.</p> <pre><code>pip install fptools\n</code></pre>"},{"location":"hypsometric_relationship.html","title":"Hypsometric Relationship","text":"<p>Warning</p> <p>This library is under development, none of the presented solutions are available for download.</p> <p>Estimate the heights of the missing trees based on the heights measured in the field.</p>"},{"location":"hypsometric_relationship.html#class-parameters","title":"Class Parameters","text":"<pre><code>HypRel(x, y, df, model, iterator)\n</code></pre> Parameters Description x The name of the column that contains the tree diameters/circumferences. y The name of the column that contains the tree heights. df The DataFrame containing the tree data. model (Optional) A list of models used for estimating tree heights. If none, will use all models avaliable. iterator (Optional) A column name string. Defines wich column will be used as a iterator. Could be a farm name, plot name, code or any unique identification tag."},{"location":"hypsometric_relationship.html#class-functions","title":"Class Functions","text":"<p>functions and parameters<pre><code>  HypRel.run()  \n  HypRel.view_metrics()  \n  HypRel.plots(dir = None, show = None) #(1) \n  HypRel.get_coef()\n  HypRel.predict()\n</code></pre></p> <ol> <li>dir = The directory you want to save your plots!      If <code>dir == None</code>, then the plots will be displayed. show = Display the plots on the screen! It can be <code>True</code> or <code>False</code>.</li> </ol> Parameters Description .run() Fit the models .view_metrics() Return a table of metrics of each evaluated model .plots(dir=None, show=True) Return the height and residuals plots .get_coef() Return the coefficients for each model .predict() Return the predict heights and used models in new columns"},{"location":"hypsometric_relationship.html#example-usage","title":"Example Usage","text":"<p>hyp_rel_example.py<pre><code>from fptools.hyp_rel import HypRel #(1)\nimport pandas as pd #(2)\n</code></pre></p> <ol> <li>Import <code>HypRel</code> class.</li> <li>Import <code>pandas</code> for data manipulation.</li> </ol> <p>Create a variable for the HypRel Class</p> <p>hyp_rel_example.py<pre><code>df = pd.read_csv(r'C:/Your/path/csv_inventory_file.csv') #(1)\nreg = HypRel('CAP',\"HT\",df) #(2)\nresults = reg.run() #(3) \nmetrics = reg.view_metrics() #(4) \nreg.plots(r'C:/Your/path/to_save',show=True) #(5) \ndf_coefficients =  reg.get_coef() #(6) \nfinal_results =  reg.predict() #(7) \n</code></pre></p> <ol> <li>Load your csv file.</li> <li>Create the variable <code>reg</code> containing the HypRel class.</li> <li>Run the models and save in the <code>results</code> variable.</li> <li>Evaluate the fitted models and save the metrics in the <code>metrics</code> variable.</li> <li>Generate the plots for the fitted models.</li> <li>Retrieve the coefficients for each fitted model.</li> <li>Obtain the final heights and the models used for estimation.</li> </ol> flowchart LR     subgraph run         runText1[Run all the available models]     end     subgraph metrics         runText2[Evaluate each fitted model]     end     subgraph plots         runText3[Generate plots]     end     subgraph coefficients         runText4[Return coefficients]     end     subgraph predict         runText5[Return the estimated heights and used functions]     end     %% Links para os subgr\u00e1ficos:     HypRel-Module --&gt; run     HypRel-Module --&gt; metrics     HypRel-Module --&gt; plots     HypRel-Module --&gt; coefficients     HypRel-Module --&gt; predict"},{"location":"hypsometric_relationship.html#available-models","title":"Available models","text":""},{"location":"hypsometric_relationship.html#curtis","title":"<li>curtis</li>","text":"\\[ \\operatorname{Total height} =e^{(\\beta_0+\u03b21*\\frac{1}{x})} \\]"},{"location":"hypsometric_relationship.html#parabolic","title":"<li>parabolic</li>","text":"\\[ \\operatorname{Total height} = \\beta_0 + \\beta_1 * x + \\beta_2 * x^2 \\]"},{"location":"hypsometric_relationship.html#stofels","title":"<li>stofels</li>","text":"\\[ \\operatorname{Total height} = e^{(\\beta_0+\\beta_1*\\ln(x))} \\]"},{"location":"hypsometric_relationship.html#henriksen","title":"<li>henriksen</li>","text":"\\[ \\operatorname{Total height} = \\beta_0 + \\beta_1 * \\ln(x) \\]"},{"location":"hypsometric_relationship.html#prodan_i","title":"<li>prodan_i</li>","text":"\\[ \\operatorname{Total height} = (\\frac{x^2}{\\beta_0+\\beta_1*x+\\beta_2* x^2}) \\]"},{"location":"hypsometric_relationship.html#prodan_ii","title":"<li>prodan_ii</li>","text":"\\[ \\operatorname{Total height} =(\\frac{x^2}{\\beta_0+\\beta_1*x+\\beta_2* x^2})+1.3 \\]"},{"location":"hypsometric_relationship.html#smd_fm","title":"<li>smd_fm</li>Transformations of YTransformations of X","text":"<p>Adaptation of the \"Forest Mensuration\" julia package by SILVA (2022), used to perform regressions using different types of transformations of diameter at breast height and height in hypsometric relationship processes.</p> <ul> <li> \\( y \\) </li> <li> \\( \\log(y) \\) </li> <li> \\( \\log(y - 1.3) \\) </li> <li> \\( \\log(1 + y) \\) </li> <li> \\( \\frac{1}{y} \\) </li> <li> \\( \\frac{1}{y - 1.3} \\) </li> <li> \\( \\frac{1}{\\sqrt{y}} \\) </li> <li> \\( \\frac{1}{\\sqrt{y - 1.3}} \\) </li> <li> \\( \\frac{x}{\\sqrt{y}} \\) </li> <li> \\( \\frac{x}{\\sqrt{y - 1.3}} \\) </li> <li> \\( \\frac{x^2}{y} \\) </li> <li> \\( \\frac{x^2}{y - 1.3} \\) </li> </ul> <ul> <li> \\( x \\) </li> <li> \\( x^2 \\) </li> <li> \\( \\log(x) \\) </li> <li> \\( \\log(x)^2 \\) </li> <li> \\( \\frac{1}{x} \\) </li> <li> \\( \\frac{1}{x^2} \\) </li> <li> \\( x + x^2 \\) </li> <li> \\( x + \\log(x) \\) </li> <li> \\( x + \\log(x)^2 \\) </li> <li> \\( x + \\frac{1}{x} \\) </li> <li> \\( x + \\frac{1}{x^2} \\) </li> <li> \\( x^2 + \\log(x) \\) </li> <li> \\( x^2 + \\log(x)^2 \\) </li> <li> \\( x^2 + \\frac{1}{x} \\) </li> <li> \\( \\log(x) + \\log(x)^2 \\) </li> <li> \\( \\log(x) + \\frac{1}{x} \\) </li> <li> \\( \\log(x) + \\frac{1}{x^2} \\) </li> <li> \\( \\log(x)^2 + \\frac{1}{x} \\) </li> <li> \\( \\log(x)^2 + \\frac{1}{x^2} \\) </li> <li> \\( \\frac{1}{x} + \\frac{1}{x^2} \\) </li> </ul>"},{"location":"hypsometric_relationship.html#ann","title":"<li>ann</li>","text":"<p>Explanation about ANN below.</p>"},{"location":"hypsometric_relationship.html#artificial-neural-network","title":"Artificial Neural Network","text":"<p>When selecting the 'ann' model, 4 different structures of artificial neural networks will be tested. Only the result from 1 model will be returned. The model returned will be selected by the ranking function. For the 'ann' model, the module sklearn.neural_network.MLPRegressor is used. --- title: ANN parameters --- classDiagram     class MLPRegressor {       Epochs: 3000       Activation: logistic       Solver Mode: lbfgs       Batch size: dynamic       Larning rate init: 0.1       Learning rate mode: adaptive     }      class Model-0 {       Hidden layer sizes: (4,5)     }     class Model_1 {       Hidden layer sizes: (4,2)     }     class Model_2 {       Hidden layer sizes: (3,2)     }     class Model_3 {       Hidden layer sizes: (4,4)     }      MLPRegressor &lt;|-- Model-0     MLPRegressor &lt;|-- Model_1     MLPRegressor &lt;|-- Model_2     MLPRegressor &lt;|-- Model_3</p>"},{"location":"hypsometric_relationship.html#ranking-function","title":"Ranking function","text":"<p>To select the best-performing models and rank them accordingly, the following metrics are obtained:</p> M\u00e9tric name Structure Mean Absolute Error (MAE) \\( MAE = \\frac{1}{n} \\sum_{i=1}^{n} \\|y_i - \\hat{y}_i\\| \\) Mean Absolute Percentage Error (MAPE) \\( MAPE = \\frac{100}{n} \\sum_{i=1}^{n} \\left\\|\\frac{y_i - \\hat{y}_i}{y_i}\\right\\| \\) Mean Squared Error (MSE) \\( MSE = \\frac{1}{n} \\sum_{i=1}^{n} (y_i - \\hat{y}_i)^2 \\) Root Mean Squared Error (RMSE) \\( RMSE = \\sqrt{\\frac{1}{n} \\sum_{i=1}^{n} (y_i - \\hat{y}_i)^2} \\) R Squared (Coefficient of Determination) \\( R^2 = 1 - \\frac{\\sum_{i=1}^{n} (y_i - \\hat{y}_i)^2}{\\sum_{i=1}^{n} (y_i - \\bar{y})^2} \\) Explained Variance (EV) \\( EV = 1 - \\frac{Var(y - \\hat{y})}{Var(y)} \\) Mean Error \\( Mean\\ Error = \\frac{1}{n} \\sum_{i=1}^{n} (y_i - \\hat{y}_i) \\) <p>After obtaining the metrics for each tested model, the best model receives a score of 10, while the others receive scores of 9, 8, and so on.</p>"},{"location":"plot_alocation.html","title":"Plot alocation","text":"<p>Warning</p> <p>This library is under development, none of the presented solutions are available for download.</p> <p>Allows the allocation of sampling plots with various types of sampling and plot formats. If you prefer a visual interface, consider using the QGIS module.</p>"},{"location":"plot_alocation.html#class-parameters","title":"Class Parameters","text":"<pre><code>PlotAlocation(shp_dir, epsg)\n</code></pre> Parameters Description shp_dir Directory of the shapefile defining the boundary of the area to be sampled. epsg The EPSG code of the shapefile defining the boundary of the area to be sampled."},{"location":"plot_alocation.html#class-functions","title":"Class Functions","text":"<p>functions and parameters<pre><code>PlotAlocation.create_plots(distribution, plot_format, plot_area,\n                            rectangle_size, sample_number, min_border_distance, \n                            x_y_angle, save_buffer, show_plot, save_dir)\n</code></pre></p> Parameter Description <code>distribution</code> Type of distribution or allocation that the plots should be subjected to. <code>plot_format</code> Format of the plot that will be installed. <code>plot_area</code> Area of the plot that will be installed. Not used when <code>plot_format = 'rectangle'</code> <code>rectangle_size</code> Used when <code>plot_format = 'rectangle'</code>.Tuple containing the sizes of X and Y of the rectangle <code>(x,y)</code>. <code>sample_number</code> Could be the number of plots or the percentage of the total area that will be sampled. If <code>value &lt; 1</code> it will be understood as a percentage. If <code>value &gt;= 1</code> it will be understood that you are setting the quantity of plots to allocate. <code>min_border_distance</code> Minimum distance in meters that the plots must be from the edge of the shapefile boundaries. <code>x_y_angle</code> Used when <code>distribution = 'systematic custom'</code>. Sets the distance in X and Y of each line in the grid of the systematic distribution and also the rotation angle in degrees <code>(x,y,angle)</code>. <code>save_buffer</code> If <code>true</code>, saves the buffer considering the plot size around the point. <code>show_plot</code> If <code>true</code>, displays a figure of the allocation performed. <code>save_dir</code> If <code>not none</code>, will be the directory where the buffer and points shapefiles will be saved. <p>Available arguments</p> Type of distributionPlot formatEPSG <ul> <li><code>random</code> : Allocate the plots in a random distribution</li> <li><code>best sampling</code> : (recommended) Allocate the plots in the best possible distribution for the area considering the established parameters. </li> <li><code>systematic</code> : Allocate the plots in a grid distribution, does not allow the definition of <code>sample_number</code> and alocate all possible plots.</li> <li><code>systematic custom</code> : Allocate the plots in a grid distribution with the <code>x</code> and <code>y</code> distances from the grid lines and <code>grid rotation angle</code> defined by the user.</li> </ul> <ul> <li><code>round</code> : Consider that plots will have a rounded shape.</li> <li><code>squared</code> : Consider that plots will have a squared shape. </li> <li><code>rectangle</code> : Allows user to insert the X and Y sizes of the desired rectangle shape. </li> </ul> <ul> <li>In order to achieve the best precision in calculation, you must select the UTM zone that your area is in. Find your utm zone.</li> </ul>"},{"location":"plot_alocation.html#example-usage","title":"Example Usage","text":""},{"location":"plot_alocation.html#random-distribution","title":"Random distribution","text":"<p>plot_alocation_example_1.py<pre><code>from fptools.inventory_plots import PlotAlocation #(1)\nplots = PlotAlocation('example/shapefile/path.shp',epsg='32722') #(2)\nplots.create_plots(distribution=\"random\", sample_number=25, plot_area=400,\n                    min_border_distance=20, save_dir='points.shp',\n                    show_plot=True, save_buffer=True) #(3)\n</code></pre></p> <ol> <li>Import <code>PlotAlocation</code> class.  </li> <li>Create the <code>plots</code> variable with <code>PlotAlocation</code> class. Defines the boundary area shapefile path and the epsg.</li> <li>Create the plots with <code>random</code> distribuition, with 25 sample points, <code>plot area = 400 m\u00b2</code>, a minimum border distance of 20 meters and save the shapefile as <code>points.shp</code>.</li> </ol>"},{"location":"plot_alocation.html#systematic-custom-distribution","title":"Systematic custom distribution","text":"<p>plot_alocation_example_2.py<pre><code>from fptools.inventory_plots import PlotAlocation #(1)\nplots = PlotAlocation('example/shapefile/path.shp',epsg='32722') #(2)\nplots.create_plots(distribution=\"systematic custom\", x_y_angle=(100,50,45),\n                    plot_area=400, min_border_distance=20, save_dir='points.shp',\n                    show_plot=True, save_buffer=True) #(3)\n</code></pre></p> <ol> <li>Import <code>PlotAlocation</code> class.  </li> <li>Create the <code>plots</code> variable with <code>PlotAlocation</code> class. Defines the boundary area shapefile path and the epsg.</li> <li>Create the plots with <code>systematic custom</code> distribuition, <code>plot area = 400 m\u00b2</code>, with <code>x distance = 100 meters</code>, <code>y distance = 50 meters</code> and 45\u00ba of grid rotation, with a minimum border distance of 20 meters and save the shapefile as <code>points.shp</code>.</li> </ol>"},{"location":"plot_alocation.html#rectangle-plot-format","title":"Rectangle plot format","text":"<p>plot_alocation_example_3.py<pre><code>from fptools.inventory_plots import PlotAlocation #(1)\nplots = PlotAlocation('example/shapefile/path.shp',epsg='32722') #(2)\nplots.create_plots(distribution=\"best sampling\", rectangle_size=(20,30), \n                    min_border_distance=20, save_dir='points.shp',\n                    show_plot=True, save_buffer=True) #(3)\n</code></pre></p> <ol> <li>Import <code>PlotAlocation</code> class.  </li> <li>Create the <code>plots</code> variable with <code>PlotAlocation</code> class. Defines the boundary area shapefile path and the epsg.</li> <li>Create the plots with <code>best sampling</code> distribuition, a <code>rectangle width (x) = 20 meters</code> and <code>height (y) = 30 meters</code>, with a minimum border distance of 20 meters and save the shapefile as <code>points.shp</code>.</li> </ol>"},{"location":"plot_alocation_qgis.html","title":"Plot alocation with QGIS","text":"<p>With the FPT Plot Allocation Plugin, you will be able to allocate inventory plots using various sampling methods and plot shapes, all through a user-friendly and intuitive graphical interface.</p>"},{"location":"plot_alocation_qgis.html#plugin-instalation","title":"Plugin instalation","text":"<p>Within QGIS, go to \"Plugins\"  \"Manage and Install Plugins\" and search for \"FPT Plot Allocation\".</p>"},{"location":"plot_alocation_qgis.html#installation-via-zip-file","title":"Installation via zip file","text":"<p>If you prefer, click here to download the ZIP file containing the plugin files. For more information about installation, see the QGIS plugins installation guide.</p>"},{"location":"plot_alocation_qgis.html#plugin-interface","title":"Plugin Interface","text":"This is the plugin interface. Below, you will learn how to configure and allocate your plots."},{"location":"plot_alocation_qgis.html#plugin-basics","title":"Plugin Basics","text":"Parameters Description Type of distribution Type of distribution of the plots. Plot format Format of the plot you want to install. Boundary layer The shapefile with the polygon of the area. Plot area Area in square meters that each plot will have. Sample numbers or sample percentage Could be the number of plots or the percentage of the total area that will be sampled. If <code>value &lt; 1</code> it will be understood as a percentage. If <code>value &gt;= 1</code> it will be understood that you are setting the quantity of plots to allocate. Minimum border distance (meters) (Optional) Define the minimum distance in meters that each plot will have from the border. EPSG The EPSG of your area. Create buffer for plots (Optional) If checked, will create a buffer showing the area of the plots. Output (Optional) Select a folder to save your plots shapefile. <p>Available arguments</p> Type of distributionPlot formatEPSG <ul> <li><code>random</code> : Allocate the plots in a random distribution</li> <li><code>best sampling</code> : (recommended) Allocate the plots in the best possible distribution for the area considering the established parameters. </li> <li><code>systematic</code> : Allocate the plots in a grid distribution, does not allow the definition of <code>sample number or sample percentage</code> and alocate all possible plots.</li> <li><code>systematic custom</code> : Allocate the plots in a grid distribution with the <code>x</code> and <code>y</code> distances from the grid lines and <code>grid rotation angle</code> defined by the user.</li> </ul> <ul> <li><code>round</code> : Consider that plots will have a rounded shape.</li> <li><code>squared</code> : Consider that plots will have a squared shape. </li> <li><code>rectangle</code> : Allows user to insert the X and Y sizes of the desired rectangle shape. </li> </ul> <ul> <li>In order to achieve the best precision in calculation, you must select the UTM zone that your area is in. Find your utm zone.</li> </ul>"},{"location":"volumetrics.html","title":"Volumetrics","text":"<p>Warning</p> <p>This library is under development, none of the presented solutions are available for download.</p> <p>Process forest inventory data. Adjust volumetric equations and taper functions for later use.</p>"},{"location":"volumetrics.html#class-parameters","title":"Class Parameters","text":"<pre><code>Volumetrics(df, tree_identifier, tree_height, tree_dbh, tree_bark,\n            segment_height, segment_diameter, tree_bark)\n</code></pre> Parameters Description df The dataframe containing the cubage data. tree_identifier The name of the column that contains the unique identifiers of the trees. tree_height The name of the column that contains the total heights of the trees (meters). tree_dbh The name of the column containing the diameter at breast height (DBH) values of the trees (centimeters). tree_bark (Optional) The name of the column containing the bark thickness values of the trees (centimeters). If  <code>tree_bark == None</code>  return only volumes with bark on 'get_volumes()' method. segment_height (Optional) The name of the column containing the heights of the cubed segments of the trees (meters). Required for <code>fit_taper_functions()</code> method. segment_diameter (Optional) The name of the column containing the diameters of the cubed segments of the trees (centimeters). Required for <code>fit_taper_functions()</code> method. tree_bark (Optional) The name of the column containing tree bark (centimeters)."},{"location":"volumetrics.html#class-functions","title":"Class Functions","text":"<p>functions and parameters<pre><code>  Volumetrics.get_volumes()  \n  Volumetrics.fit_taper_functions(models,iterator)  #(1)\n  Volumetrics.fit_volumetric_functions(models, iterator, vol_column) #(2)\n  Volumetrics.get_individual_diameter(hi,tree_height, tree_dbh) #(3)\n  Volumetrics.get_individual_taper_volume(tree_height, tree_dbh, stump=0.1) #(4)\n  Volumetrics.get_individual_volume(tree_height, tree_dbh) #(5)\n</code></pre></p> <ol> <li>models = (Optional) List of models to be fitted! If <code>models == None</code> uses all available models.                                      iterator = (Optional) A column name string. Defines wich column will be used as a iterator. Could be a farm name, plot name, code or any unique identification tag.</li> <li>models = (Optional) List of models to be fitted! If <code>models == None</code> uses all available models.                                      iterator = (Optional) A column name string. Defines wich column will be used as a iterator. Could be a farm name, plot name, code or any unique identification tag.    vol_column = (Optional) A column name to the volume values. If <code>vol_column == None</code>, it uses de volumes obtained by the <code>get_volumes()</code> method to fit the volumetric functions.  </li> <li>hi = Fraction of height from which you want to obtain the diameter (meters).                                      tree_height =  Total height of the tree (meters). tree_dbh = Diameter at breast height (DBH) value of the tree (centimeters).</li> <li>tree_height = Total height of the tree (meters).                                      tree_dbh = Diameter at breast height (DBH) of the tree (centimeters). stump = Stump height (meters). By default, uses <code>stump = 0.1</code>.  </li> <li>tree_height = Total height of the tree (meters).                                      tree_dbh = Diameter at breast height (DBH) of the tree (centimeters).  </li> </ol> Parameters Description .get_volumes() Returns the volume of each cubed segment and the total volume of each tree separated by <code>tree_identifier</code>. If <code>tree_bark == None</code>, it returns only the volume with bark; otherwise, it returns the volume with and without bark. .fit_taper_functions() Fits the available taper function models. Saves a <code>.json</code> file with the coefficients for each fitted model and a <code>.pkl</code> file for the fitted ANN's. .get_individual_diameter() Returns a pandas dataframe with diameter at a given <code>hi</code> height of the tree for each fitted taper model. .get_individual_taper_volume() Returns a pandas DataFrame with the estimated volume for the provided height and diameter at breast height for each fitted taper function. It uses the integration of taper functions to obtain the result. .get_individual_volume() Returns a pandas DataFrame with the estimated volume for the provided height and diameter at breast height for each fitted volumetric function."},{"location":"volumetrics.html#example-usage","title":"Example Usage","text":"<p>taper_functions_example.py<pre><code>from fptools.fit_volumetrics import Volumetrics #(1)\nimport pandas as pd #(2)\n</code></pre></p> <ol> <li>Import <code>Volumetrics</code> class.</li> <li>Import <code>pandas</code> for data manipulation.</li> </ol> <p>Create a variable for the Volumetrics Class</p> <p>taper_functions_example.py<pre><code>df = pd.read_csv(r'C:\\Your\\path\\csv_tree_cubage_file.csv') #(1)\nvol = Volumetrics(df=df, tree_identifier='arvore_id', tree_height='HT', tree_dbh='DAP', segment_height='HT segmento', segment_diameter='Dsegmento',tree_bark='Casca') #(2)\ncalculated_volumes_df = vol.get_volumes() #(3) \nmetrics = vol.fit_taper_functions() #(4) \nvol.get_individual_diameter(1.3, 25, 30) #(5)\nvol.get_individual_taper_volume(30, 22.8) #(6)\nvol.get_individual_volume(30, 22.8) #(7)\n</code></pre></p> <ol> <li>Load your csv file.</li> <li>Create the variable <code>vol</code> containing the <code>Volumetrics</code> class.</li> <li>Calculate volumes for each tree and segments em save the results on <code>calculated_volumes_df</code> variable.</li> <li>Fit the taper functions and save the performance metris in <code>metrics</code> variable. It will create a <code>.json</code> file with the models coefficients and a <code>.pkl</code> files for the fitted ann models.</li> <li>Get the diameter at 1.3 meters of a tree with a total height of 25 meters and a diameter at breast height (DBH) of 30 centimeters.</li> <li>Obtains the volumes calculated from the integration of taper functions for a tree with a height of 30 meters, a diameter at breast height of 22.8 centimeters, considering a stump height of 0.15 meters</li> <li>Obtains the volumes calculated from the fitted volumetric functions for a tree with a height of 30 meters and a diameter at breast height of 22.8 centimeters.</li> </ol>"},{"location":"volumetrics.html#available-taper-models","title":"Available taper models","text":""},{"location":"volumetrics.html#schoepfer","title":"<li>schoepfer</li>","text":"\\[ \\operatorname{d_i} =dbh\\left( b_0 + b_1 \\left( \\frac{h_i}{H} \\right) + b_2 \\left( \\frac{h_i}{H} \\right)^2 + b_3 \\left( \\frac{h_i}{H} \\right)^3 + b_4 \\left( \\frac{h_i}{H} \\right)^4 + b_5 \\left( \\frac{h_i}{H} \\right)^5 \\right) \\]"},{"location":"volumetrics.html#bi","title":"<li>bi</li>","text":"\\[ \\operatorname{d_i}=dbh\\left[ \\left( \\frac{log\\;sin \\left( \\frac{\\pi}{2} \\frac{h_i}{H} \\right)} {log\\;sin \\left( \\frac{\\pi}{2} \\frac{1.3}{H} \\right)} \\right) ^{\\beta_0+\\beta_1sin\\left(\\frac{\\pi}{2}\\frac{h_i}{H}\\right)+\\beta_2sin\\left(\\frac{3\\pi}{2}\\frac{h_i}{H}\\right)+\\beta_3sin\\left(\\frac{\\pi}{2}\\frac{h_i}{H}\\right)/\\frac{h_i}{H}+\\beta_4dbh+\\beta_5\\frac{h_i}{H}\\sqrt{dbh}+\\beta_6\\frac{h_i}{H}\\sqrt{H}} \\right] \\]"},{"location":"volumetrics.html#kozak","title":"<li>kozak</li>","text":"\\[ \\operatorname{d_i} =b_0 \\cdot (dbh^{b_1}) \\cdot (h^{b_2}) \\cdot \\left(\\frac{1 - \\left(\\frac{h_i}{h}\\right)^{1/4}}{1 - \\left(p^{1/3}\\right)}\\right)^{b_3 \\cdot \\left(\\frac{h_i}{h}\\right)^4 + b_4 \\cdot \\left(\\frac{1}{e^{dbh/h}}\\right) + b_5 \\cdot \\left(\\frac{1 - \\left(\\frac{h_i}{h}\\right)^{1/4}}{1 - \\left(p^{1/3}\\right)}\\right)^{0.1} + b_6 \\cdot \\left(\\frac{1}{dbh}\\right) + b_7 \\cdot \\left(h^{1 - \\left(\\frac{h_i}{h}\\right)^{1/3}}\\right) + b_8 \\cdot \\left(\\frac{1 - \\left(\\frac{h_i}{h}\\right)^{1/4}}{1 - \\left(p^{1/3}\\right)}\\right)} \\]"},{"location":"volumetrics.html#johnson","title":"<li>johnson</li>","text":"\\[ \\operatorname{d_i} = dbh \\cdot \\left( b_0 \\cdot \\log\\left( \\frac{b_1 + \\frac{(H - h_i)}{(H - 1.3)}}{b_2} \\right) \\right) \\]"},{"location":"volumetrics.html#matte","title":"<li>matte</li>","text":"\\[ \\operatorname{d_i} = dbh \\cdot \\left( b_0 \\cdot \\left( \\frac{H - h_i}{H - 1.30} \\right)^2 + b_1 \\cdot \\left( \\frac{H - h_i}{H - 1.30} \\right)^3 + b_2 \\cdot \\left( \\frac{H - h_i}{H - 1.30} \\right)^4 \\right) \\]"},{"location":"volumetrics.html#ann","title":"<li>ann</li>","text":""},{"location":"volumetrics.html#notation","title":"Notation","text":"<ul> <li>\\( \u03b2_n \\): Fitted parameters</li> <li>\\( d_i \\): Diameter (cm)</li> <li>\\( \\text{dbh} \\): Diameter at breast height (cm)</li> <li>\\( H \\): Total height (m)</li> <li>\\( h_i \\): Segment height (m)</li> </ul>"},{"location":"volumetrics.html#artificial-neural-network","title":"Artificial Neural Network","text":"<p>When selecting the 'ann' model, 5 different structures of artificial neural networks will be tested. Only the result from 1 model will be returned. The model returned will be selected by the ranking function. For the 'ann' model, the module sklearn.neural_network.MLPRegressor is used. --- title: ANN Parameters --- classDiagram     direction LR      class MLPRegressor {       Epochs: 3000       Activation: logistic       Solver Mode: lbfgs       Batch size: dynamic       Learning rate init: 0.1       Learning rate mode: adaptive     }      class Model-0 {       Hidden layer sizes: (4,5)       'relogisticlu' activation     }     class Model-1 {       Hidden layer sizes: (4,2)       'logistic' activation     }     class Model-2 {       Hidden layer sizes: (3,2)       'logistic' activation     }     class Model-3 {       Hidden layer sizes: (4,4)       'logistic' activation     }     class Model-4 {       Hidden layer sizes: (4,4)       'relu' activation     }      MLPRegressor &lt;|-- Model-0     MLPRegressor &lt;|-- Model-1     MLPRegressor &lt;|-- Model-2     MLPRegressor &lt;|-- Model-3     MLPRegressor &lt;|-- Model-4</p>"},{"location":"volumetrics.html#available-volumetric-models","title":"Available volumetric models","text":""},{"location":"volumetrics.html#spurr-model","title":"<li>Spurr Model</li>","text":"\\[ \\operatorname{V} = b_0 + b_1 \\cdot (\\text{dbh}^2) \\cdot H \\]"},{"location":"volumetrics.html#schumacher-hall-model","title":"<li>Schumacher-Hall Model</li>","text":"\\[ \\operatorname{V} = b_0 \\cdot (\\text{dbh}^{b_1}) \\cdot (H^{b_2}) \\]"},{"location":"volumetrics.html#honner-model","title":"<li>Honner Model</li>","text":"\\[ \\operatorname{V} = \\frac{\\text{dbh}^2}{b_1 \\cdot \\left(\\frac{1}{H}\\right)} \\]"},{"location":"volumetrics.html#ogaya-model","title":"<li>Ogaya Model</li>","text":"\\[ \\operatorname{V} = \\frac{\\text{dbh}^2}{b_1 \\cdot H} \\]"},{"location":"volumetrics.html#stoate-model","title":"<li>Stoate Model</li>","text":"\\[ \\operatorname{V} = b_0 + b_1 \\cdot \\text{dbh}^2 + b_2 \\cdot \\text{dbh}^2 \\cdot H + b_3 \\cdot H \\]"},{"location":"volumetrics.html#naslund-model","title":"<li>Naslund Model</li>","text":"\\[ \\operatorname{V} = b_1 \\cdot \\text{dbh}^2 + b_2 \\cdot \\text{dbh}^2 \\cdot H + b_3 \\cdot \\text{dbh} \\cdot H^2 + b_4 \\cdot H^2 \\]"},{"location":"volumetrics.html#takata-model","title":"<li>Takata Model</li>","text":"\\[ \\operatorname{V} = \\frac{\\text{dbh}^2 \\cdot H}{b_0 + b_1 \\cdot \\text{dbh}} \\]"},{"location":"volumetrics.html#spurr-logarithmic-model","title":"<li>Spurr Logarithmic Model</li>","text":"\\[ \\operatorname{V} = \\exp(b_0 + b_1 \\cdot \\log(\\text{dbh}^2 \\cdot H)) \\]"},{"location":"volumetrics.html#meyer-model","title":"<li>Meyer Model</li>","text":"\\[ \\operatorname{V} = b_0 + b_1 \\cdot \\text{dbh}^2 + b_2 \\cdot \\text{dbh} + b_3 \\cdot \\text{dbh} \\cdot H + b_4 \\cdot \\text{dbh}^2 \\cdot H \\]"},{"location":"volumetrics.html#ann_1","title":"<li>ann</li>","text":"<p>Use the same ann models used for taper function.</p>"},{"location":"volumetrics.html#notation_1","title":"Notation","text":"<ul> <li>\\( V \\): Estimated volume (m\u00b3)</li> <li>\\( \\text{dbh} \\): Diameter at breast height (cm)</li> <li>\\( H \\): Total height (m)</li> </ul>"},{"location":"volumetrics.html#ranking-function","title":"Ranking function","text":"<p>To select the best-performing models and rank them accordingly, the following metrics are obtained:</p> M\u00e9tric name Structure Mean Absolute Error (MAE) \\( MAE = \\frac{1}{n} \\sum_{i=1}^{n} \\|y_i - \\hat{y}_i\\| \\) Mean Absolute Percentage Error (MAPE) \\( MAPE = \\frac{100}{n} \\sum_{i=1}^{n} \\left\\|\\frac{y_i - \\hat{y}_i}{y_i}\\right\\| \\) Mean Squared Error (MSE) \\( MSE = \\frac{1}{n} \\sum_{i=1}^{n} (y_i - \\hat{y}_i)^2 \\) Root Mean Squared Error (RMSE) \\( RMSE = \\sqrt{\\frac{1}{n} \\sum_{i=1}^{n} (y_i - \\hat{y}_i)^2} \\) R Squared (Coefficient of Determination) \\( R^2 = 1 - \\frac{\\sum_{i=1}^{n} (y_i - \\hat{y}_i)^2}{\\sum_{i=1}^{n} (y_i - \\bar{y})^2} \\) Explained Variance (EV) \\( EV = 1 - \\frac{Var(y - \\hat{y})}{Var(y)} \\) Mean Error \\( Mean\\ Error = \\frac{1}{n} \\sum_{i=1}^{n} (y_i - \\hat{y}_i) \\) <p>After obtaining the metrics for each tested model, the best model receives a score of 10, while the others receive scores of 9, 8, and so on.</p>"}]}