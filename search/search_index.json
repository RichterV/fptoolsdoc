{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"Forest Py ToolsFP Tools features","text":"<p>Warning</p> <p>This library is under development, none of the presented solutions are available for download.</p> <p></p> <p>Process forest management end-to-end, easy as can be.</p> <p>With this library, you'll be able to plan forest inventories and volumetrics as well as process all data stemming from your forest plantation. FP Tools brings together various forestry processing methodologies into a single library, providing ease in model selection and forest performance analysis.</p> <p>This library was created as a master's project by student Vinicius Richter, with the aim of facilitating the processing of forest inventory information.</p>"},{"location":"index.html#hypsometric-relationship","title":"Hypsometric Relationship","text":"<p>In this module, you'll be able to perform the hypsometric relationship of a forest inventory using various equations as well as make use of artificial neural networks.</p>"},{"location":"index.html#forest-inventory-planing-plots-alocation","title":"Forest inventory planing (plots alocation)","text":"<p>In this module, you will be able to plan forest inventories by allocating plots, using both pure Python code and a plugin for QGIS.</p>"},{"location":"getting_started.html","title":"Getting Started","text":"<p>Warning</p> <p>This library is under development, none of the presented solutions are available for download.</p> <p>To begin processing your forest data, as easily as possible, first install FP Tools.</p> <pre><code>pip install fptools\n</code></pre>"},{"location":"hypsometric_relationship.html","title":"Hypsometric Relationship","text":"<p>Warning</p> <p>This library is under development, none of the presented solutions are available for download.</p> <p>Estimate the heights of the missing trees based on the heights measured in the field.</p>"},{"location":"hypsometric_relationship.html#class-parameters","title":"Class Parameters","text":"<pre><code>HypRel(x, y, df, model, iterator)\n</code></pre> Parameters Description x The name of the column that contains the tree diameters. y The name of the column that contains the tree heights. df The DataFrame containing the tree data. model (Optional) A list of models used for estimating tree heights. If none, will use all models avaliable. iterator (Optional) A column name string. Defines wich column will be used as a iterator. Could be a farm name, plot name, code or any unique identification tag."},{"location":"hypsometric_relationship.html#class-functions","title":"Class Functions","text":"<p>functions and parameters<pre><code>  HypRel.run()  \n  HypRel.metrics()  \n  HypRel.plots(dir = None, show = None) #(1) \n  HypRel.get_coef()\n</code></pre></p> <ol> <li>dir = The directory you want to save your plots!      If <code>dir == None</code>, then the plots will be displayed. Show = Display the plots on the screen! It can be <code>True</code> or <code>False</code></li> </ol> Parameters Description .run() Fit the models .metrics() Return a table of metrics of each evaluated model .plots(dir=None, show=True) (1) Return the height and residuals plots .get_coef() Return the coefficients for each model"},{"location":"hypsometric_relationship.html#example-usage","title":"Example Usage","text":"<p>hyp_rel_example.py<pre><code>from fptools.hyp_rel import HypRel #(1)\nimport pandas as pd #(2)\n</code></pre></p> <ol> <li>Import <code>HypRel</code> class.</li> <li>Import <code>pandas</code> for data manipulation.</li> </ol> flowchart LR     subgraph run         runText1[Run all the available models]     end     subgraph metrics         runText2[Evaluate each fitted model]     end     subgraph plots         runText3[Generate plots]     end     subgraph coefficients         runText4[Return coefficients]     end     %% Links para os subgr\u00e1ficos:     HypRel-Module --&gt; run     HypRel-Module --&gt; metrics     HypRel-Module --&gt; plots     HypRel-Module --&gt; coefficients  <p>Create a variable for the HypRel Class</p> <p>hyp_rel_example.py<pre><code>df = pd.read_csv(r'C:\\Your\\path\\csv_inventory_file.csv') #(1)\nreg = HypRel('CAP',\"HT\",df) #(2)\nresults = reg.run() #(3) \nmetrics = reg.metrics() #(4) \nreg.plots('C:\\Your\\path\\to_save',show=True) #(5) \ndf_coefficients =  reg.get_coef() #(6) \n</code></pre></p> <ol> <li>Load your csv file.</li> <li>Create the variable <code>reg</code> containing the HypRel class.</li> <li>Run the models and save in the <code>results</code> variable.</li> <li>Run a evaluation for the fitted models and save on <code>metrics</code> variable.</li> <li>Return the plots for the fitted models.</li> <li>Get the coefficients for each model fitted.</li> </ol>"},{"location":"hypsometric_relationship.html#available-models","title":"Available models","text":"<ol> <li> \\[ \\operatorname{Total height} =e^{(\\beta_0+\u03b21*\\frac{1}{x})} \\] </li> <li> \\[ \\operatorname{Total height} = \\beta_0 + \\beta_1 * x + \\beta_2 * x^2 \\] </li> <li> \\[ \\operatorname{Total height} = e^{(\\beta_0+\\beta_1*\\ln(x))} \\] </li> <li> \\[ \\operatorname{Total height} = \\beta_0 + \\beta_1 * \\ln(x) \\] </li> <li> \\[ \\operatorname{Total height} = (\\frac{x^2}{\\beta_0+\\beta_1*x+\\beta_2* x^2}) \\] </li> <li> \\[ \\operatorname{Total height} =(\\frac{x^2}{\\beta_0+\\beta_1*x+\\beta_2* x^2})+1.3 \\] </li> <li>Explanation about ANN below.</li> </ol>"},{"location":"hypsometric_relationship.html#curtis-1","title":"<li>curtis (1)</li>","text":""},{"location":"hypsometric_relationship.html#parabolic-2","title":"<li>parabolic (2) </li>","text":""},{"location":"hypsometric_relationship.html#stoffels-3","title":"<li>stoffels (3)</li>","text":""},{"location":"hypsometric_relationship.html#henriksen-4","title":"<li>henriksen (4)</li>","text":""},{"location":"hypsometric_relationship.html#prodan_i-5","title":"<li>prodan_i (5)</li>","text":""},{"location":"hypsometric_relationship.html#prodan_ii-6","title":"<li>prodan_ii (6)</li>","text":""},{"location":"hypsometric_relationship.html#ann-7","title":"<li>ann (7)</li>","text":""},{"location":"hypsometric_relationship.html#artificial-neural-network","title":"Artificial Neural Network","text":"<p>When selecting the 'ann' model, 4 different structures of artificial neural networks will be tested. Only the result from 1 model will be returned. The model returned will be selected by the ranking function. --- title: ANN parameters --- classDiagram     class MLPRegressor {       Epochs: 3000       Activation: logistic       Solver Mode: lbfgs       Batch size: dynamic       Larning rate init: 0.1       Learning rate mode: adaptive     }      class Model-0 {       Hidden layer sizes: (4,5)     }     class Model_1 {       Hidden layer sizes: (4,2)     }     class Model_2 {       Hidden layer sizes: (3,2)     }     class Model_3 {       Hidden layer sizes: (4,4)     }      MLPRegressor &lt;|-- Model-0     MLPRegressor &lt;|-- Model_1     MLPRegressor &lt;|-- Model_2     MLPRegressor &lt;|-- Model_3</p>"},{"location":"hypsometric_relationship.html#ranking-function","title":"Ranking function","text":"<p>For the 'ann' model, the module sklearn.neural_network.MLPRegressor is used.</p> <p>To select the best-performing models and rank them accordingly, the following metrics are obtained:</p> M\u00e9tric name Structure Mean Absolute Error (MAE) \\( MAE = \\frac{1}{n} \\sum_{i=1}^{n} \\|y_i - \\hat{y}_i\\| \\) Mean Absolute Percentage Error (MAPE) \\( MAPE = \\frac{100}{n} \\sum_{i=1}^{n} \\left\\|\\frac{y_i - \\hat{y}_i}{y_i}\\right\\| \\) Mean Squared Error (MSE) \\( MSE = \\frac{1}{n} \\sum_{i=1}^{n} (y_i - \\hat{y}_i)^2 \\) Root Mean Squared Error (RMSE) \\( RMSE = \\sqrt{\\frac{1}{n} \\sum_{i=1}^{n} (y_i - \\hat{y}_i)^2} \\) R Squared (Coefficient of Determination) \\( R^2 = 1 - \\frac{\\sum_{i=1}^{n} (y_i - \\hat{y}_i)^2}{\\sum_{i=1}^{n} (y_i - \\bar{y})^2} \\) Explained Variance (EV) \\( EV = 1 - \\frac{Var(y - \\hat{y})}{Var(y)} \\) Mean Error \\( Mean\\ Error = \\frac{1}{n} \\sum_{i=1}^{n} (y_i - \\hat{y}_i) \\) <p>After obtaining the metric for each tested model, the values are normalized from 0 to 10. The worst model receives a score of 0, and the best model receives a score of 10.</p>"},{"location":"plot_alocation.html","title":"Forest Py Tools","text":"<p>Warning</p> <p>This library is under development, none of the presented solutions are available for download.</p>"}]}